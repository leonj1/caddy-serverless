name: Integration Tests

on:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Cache Docker layers
      uses: actions/cache@v4
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build test Docker images
      run: |
        echo "Building Go echo server test image..."
        docker build -t caddy-serverless-go-echoserver-test:latest ./testdata/echoserver/
        
        echo "Building Python echo server test image..."
        docker build -t caddy-serverless-py-echoserver-test:latest ./testdata/pyechoserver/
    
    - name: Verify test images
      run: |
        docker images | grep caddy-serverless-go-echoserver-test
        docker images | grep caddy-serverless-py-echoserver-test
    
    - name: Install xcaddy
      run: go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
    
    - name: Build Caddy with serverless plugin
      run: |
        xcaddy build \
          --with github.com/jose/caddy-serverless=.
    
    - name: Run integration tests
      run: |
        # Run integration tests with proper build tags
        go test -v -tags=integration -timeout=10m ./...
      env:
        DOCKER_HOST: unix:///var/run/docker.sock
    
    - name: Run serverless handler tests
      run: |
        # Start a test Caddy server in the background
        ./caddy start --config ./example.Caddyfile --adapter caddyfile &
        CADDY_PID=$!
        
        # Wait for Caddy to start
        sleep 5
        
        # Run some basic tests
        echo "Testing serverless endpoint..."
        curl -f http://localhost:8080/health || echo "Health check endpoint not configured"
        
        # Stop Caddy
        kill $CADDY_PID || true
    
    - name: Clean up Docker resources
      if: always()
      run: |
        # Stop and remove any running containers
        docker ps -q | xargs -r docker stop
        docker ps -aq | xargs -r docker rm
        
        # Remove test images
        docker rmi caddy-serverless-go-echoserver-test:latest || true
        docker rmi caddy-serverless-py-echoserver-test:latest || true