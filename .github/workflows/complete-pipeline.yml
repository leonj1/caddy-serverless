name: Complete Pipeline

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      skip_deployment:
        description: 'Skip deployment step'
        required: false
        default: false
        type: boolean
      version_bump:
        description: 'Version bump type (patch, minor, major)'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GO_VERSION: '1.22'
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY || 'caddy-serverless' }}

jobs:
  code-quality:
    name: 🔍 Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=10m

  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Run unit tests
        run: |
          go test -v -race -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.html

  integration-tests:
    name: 🔌 Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Start Docker
        run: |
          sudo systemctl start docker
          docker version

      - name: Run integration tests
        run: |
          go test -v -tags=integration ./integration/...

  validate-plugin:
    name: ✅ Validate Plugin
    runs-on: ubuntu-latest
    needs: integration-tests
    strategy:
      matrix:
        caddy-version: ['2.7.6', '2.8.4']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Install Caddy
        run: |
          go install github.com/caddyserver/xcaddy/cmd/xcaddy@latest
          xcaddy version

      - name: Build with xcaddy
        run: |
          xcaddy build v${{ matrix.caddy-version }} \
            --with github.com/leonj1/caddy-serverless=${{ github.workspace }}

      - name: Test plugin loading
        run: |
          ./caddy version
          ./caddy list-modules | grep serverless
          ./caddy validate --config examples/Caddyfile || true

  build-and-release:
    name: 📦 Build & Release
    runs-on: ubuntu-latest
    needs: validate-plugin
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Determine version bump
        id: bump_type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "type=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
          else
            # Analyze commit messages for conventional commits
            COMMIT_MSG=$(git log -1 --pretty=%B)
            if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"!"* ]]; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif [[ "$COMMIT_MSG" == feat* ]]; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: version
        run: |
          CURRENT_VERSION=$(cat VERSION)
          echo "Current version: $CURRENT_VERSION"
          
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ steps.bump_type.outputs.type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "$NEW_VERSION" > VERSION
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.new_version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Commit version bump
        run: |
          git add VERSION
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]"
          git tag v${{ steps.version.outputs.new_version }}

      - name: Push changes and tags
        run: |
          git push origin HEAD:${{ github.ref_name }}
          git push origin v${{ steps.version.outputs.new_version }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Docker Image
            
            ```bash
            docker pull ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.version.outputs.new_version }}
            ```
            
            ## Changes
            
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-release
    if: |
      (github.event_name == 'push' && github.event.inputs.skip_deployment != 'true') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.skip_deployment != 'true')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TAILSCALE_CLIENT_ID }}
          oauth-secret: ${{ secrets.TAILSCALE_CLIENT_SECRET }}
          tags: tag:github-actions

      - name: Verify Tailscale connection
        run: |
          echo "Waiting for Tailscale to connect..."
          sleep 5
          tailscale status
          echo "Pinging deployment server..."
          tailscale ping ${{ secrets.DEPLOY_HOST }} -c 3

      - name: Deploy to VM
        env:
          DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          IMAGE_URL: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-release.outputs.new_version }}
        run: |
          echo "Deploying version ${{ needs.build-and-release.outputs.new_version }} to production"
          
          # Create deployment script
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Starting deployment..."
          IMAGE_URL="${IMAGE_URL}"
          DEPLOY_PATH="${DEPLOY_PATH}"
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          # Pull the new image
          echo "Pulling Docker image..."
          docker pull "${IMAGE_URL}"
          
          # Stop existing container
          echo "Stopping existing container..."
          docker stop caddy-serverless || true
          docker rm caddy-serverless || true
          
          # Backup current Caddyfile if it exists
          if [ -f "${DEPLOY_PATH}/Caddyfile" ]; then
            cp "${DEPLOY_PATH}/Caddyfile" "${DEPLOY_PATH}/Caddyfile.backup"
          fi
          
          # Start new container
          echo "Starting new container..."
          docker run -d \
            --name caddy-serverless \
            --restart unless-stopped \
            -p 80:80 \
            -p 443:443 \
            -p 2019:2019 \
            -v /var/run/docker.sock:/var/run/docker.sock \
            -v "${DEPLOY_PATH}/Caddyfile:/etc/caddy/Caddyfile:ro" \
            -v "${DEPLOY_PATH}/data:/data" \
            -v "${DEPLOY_PATH}/config:/config" \
            "${IMAGE_URL}"
          
          # Wait for container to be healthy
          echo "Waiting for container to be healthy..."
          for i in {1..30}; do
            if docker exec caddy-serverless caddy version >/dev/null 2>&1; then
              echo "Container is healthy!"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Container failed to become healthy"
              docker logs caddy-serverless
              exit 1
            fi
            sleep 2
          done
          
          # Verify deployment
          echo "Verifying deployment..."
          curl -f http://localhost/health || exit 1
          
          # Cleanup old images
          echo "Cleaning up old images..."
          docker image prune -f
          
          echo "Deployment completed successfully!"
          EOF
          
          # Copy deployment script to server
          scp -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ProxyCommand="tailscale nc %h %p" \
              deploy.sh ${DEPLOY_USER}@${DEPLOY_HOST}:/tmp/deploy.sh
          
          # Execute deployment script
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ProxyCommand="tailscale nc %h %p" \
              ${DEPLOY_USER}@${DEPLOY_HOST} \
              "chmod +x /tmp/deploy.sh && IMAGE_URL='${IMAGE_URL}' DEPLOY_PATH='${DEPLOY_PATH}' /tmp/deploy.sh && rm /tmp/deploy.sh"

      - name: Post-deployment verification
        run: |
          echo "Verifying deployment..."
          DEPLOY_HOST=${{ secrets.DEPLOY_HOST }}
          
          # Check health endpoint
          curl -f http://${DEPLOY_HOST}/health || exit 1
          
          # Check container status
          ssh -o StrictHostKeyChecking=no \
              -o UserKnownHostsFile=/dev/null \
              -o ProxyCommand="tailscale nc %h %p" \
              ${{ secrets.DEPLOY_USER }}@${DEPLOY_HOST} \
              "docker ps | grep caddy-serverless"

      - name: Deployment summary
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Successfully deployed version ${{ needs.build-and-release.outputs.new_version }} to production!"
            echo "🌐 Application URL: https://${{ secrets.DEPLOY_HOST }}"
          else
            echo "❌ Deployment failed! Check the logs above for details."
          fi